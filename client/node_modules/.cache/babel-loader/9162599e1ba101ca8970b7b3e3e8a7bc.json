{"ast":null,"code":"var _jsxFileName = \"E:\\\\Do_an_bao_ve\\\\client\\\\src\\\\components\\\\reserve\\\\Reserve.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport useFetch from '../../hooks/useFetch';\nimport { SearchContext } from '../../context/SearchContext';\nimport { AuthContext } from '../../context/AuthContext'; // Import AuthContext\n\nimport axios from 'axios';\nimport './reserve.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Reserve = _ref => {\n  _s();\n\n  let {\n    setOpen,\n    hotelId\n  } = _ref;\n  const {\n    dates,\n    options\n  } = useContext(SearchContext);\n  const {\n    user\n  } = useContext(AuthContext); // Lấy thông tin người dùng từ AuthContext\n\n  const [availableRooms, setAvailableRooms] = useState([]);\n  const [selectedRooms, setSelectedRooms] = useState([]);\n  const MILLISECONDS_PER_DAY = 1000 * 60 * 60 * 24;\n\n  const dayDifference = (date1, date2) => {\n    const timeDiff = Math.abs(date2.getTime() - date1.getTime());\n    return Math.ceil(timeDiff / MILLISECONDS_PER_DAY);\n  };\n\n  const totalDays = dayDifference(dates[0].endDate, dates[0].startDate); // Lấy thông tin phòng còn trống từ server\n\n  const {\n    data,\n    loading,\n    error\n  } = useFetch(`/rooms/available?hotelId=${hotelId}&startDate=${dates[0].startDate}&endDate=${dates[0].endDate}`);\n  useEffect(() => {\n    const fetchRooms = async () => {\n      try {\n        const response = await axios.get(`/rooms/available`, {\n          params: {\n            hotelId,\n            dates\n          }\n        });\n        setAvailableRooms(response.data); // Giả sử response.data chứa danh sách phòng\n      } catch (error) {\n        console.error(\"Lỗi khi lấy phòng:\", error);\n      }\n    };\n\n    fetchRooms();\n  }, [hotelId, dates]);\n\n  const handleSelect = roomId => {\n    setSelectedRooms(prev => {\n      if (prev.includes(roomId)) {\n        return prev.filter(id => id !== roomId);\n      } else {\n        return [...prev, roomId];\n      }\n    });\n  };\n\n  const handleReserve = async () => {\n    try {\n      await axios.post('/reservations', {\n        roomIds: selectedRooms,\n        hotelId,\n        userId: user._id,\n        // Sử dụng ID người dùng từ context\n        dates\n      }); // Xử lý sau khi đặt phòng thành công\n\n      setOpen(false);\n    } catch (err) {\n      console.error(err); // Xử lý lỗi ở đây\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"reserve\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Ch\\u1ECDn ph\\xF2ng\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), loading ? \"Loading...\" : error ? /*#__PURE__*/_jsxDEV(\"span\", {\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this) : availableRooms.map(room => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"room\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        id: room._id,\n        onChange: () => handleSelect(room._id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: room._id,\n        children: [room.name, \" - Gi\\xE1: $\", room.price, \" cho \", totalDays, \" \\u0111\\xEAm\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this)]\n    }, room._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleReserve,\n      disabled: selectedRooms.length === 0,\n      children: \"\\u0110\\u1EB7t ph\\xF2ng\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Reserve, \"OrmHBFgirNpNlHuT7PWbB6x4yNE=\", false, function () {\n  return [useFetch];\n});\n\n_c = Reserve;\nexport default Reserve;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reserve\");","map":{"version":3,"sources":["E:/Do_an_bao_ve/client/src/components/reserve/Reserve.jsx"],"names":["React","useContext","useEffect","useState","useFetch","SearchContext","AuthContext","axios","Reserve","setOpen","hotelId","dates","options","user","availableRooms","setAvailableRooms","selectedRooms","setSelectedRooms","MILLISECONDS_PER_DAY","dayDifference","date1","date2","timeDiff","Math","abs","getTime","ceil","totalDays","endDate","startDate","data","loading","error","fetchRooms","response","get","params","console","handleSelect","roomId","prev","includes","filter","id","handleReserve","post","roomIds","userId","_id","err","message","map","room","name","price","length"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\r\nimport useFetch from '../../hooks/useFetch';\r\nimport { SearchContext } from '../../context/SearchContext';\r\nimport { AuthContext } from '../../context/AuthContext'; // Import AuthContext\r\nimport axios from 'axios';\r\nimport './reserve.css';\r\n\r\nconst Reserve = ({ setOpen, hotelId }) => {\r\n  const { dates, options } = useContext(SearchContext);\r\n  const { user } = useContext(AuthContext); // Lấy thông tin người dùng từ AuthContext\r\n  const [availableRooms, setAvailableRooms] = useState([]);\r\n  const [selectedRooms, setSelectedRooms] = useState([]);\r\n\r\n  const MILLISECONDS_PER_DAY = 1000 * 60 * 60 * 24;\r\n\r\n  const dayDifference = (date1, date2) => {\r\n    const timeDiff = Math.abs(date2.getTime() - date1.getTime());\r\n    return Math.ceil(timeDiff / MILLISECONDS_PER_DAY);\r\n  };\r\n\r\n  const totalDays = dayDifference(dates[0].endDate, dates[0].startDate);\r\n\r\n  // Lấy thông tin phòng còn trống từ server\r\n  const { data, loading, error } = useFetch(`/rooms/available?hotelId=${hotelId}&startDate=${dates[0].startDate}&endDate=${dates[0].endDate}`);\r\n\r\n  useEffect(() => {\r\n    const fetchRooms = async () => {\r\n      try {\r\n        const response = await axios.get(`/rooms/available`, {\r\n          params: { hotelId, dates },\r\n        });\r\n        setAvailableRooms(response.data); // Giả sử response.data chứa danh sách phòng\r\n      } catch (error) {\r\n        console.error(\"Lỗi khi lấy phòng:\", error);\r\n      }\r\n    };\r\n  \r\n    fetchRooms();\r\n  }, [hotelId, dates]);\r\n  \r\n  const handleSelect = (roomId) => {\r\n    setSelectedRooms((prev) => {\r\n      if (prev.includes(roomId)) {\r\n        return prev.filter((id) => id !== roomId);\r\n      } else {\r\n        return [...prev, roomId];\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleReserve = async () => {\r\n    try {\r\n      await axios.post('/reservations', {\r\n        roomIds: selectedRooms,\r\n        hotelId,\r\n        userId: user._id, // Sử dụng ID người dùng từ context\r\n        dates,\r\n      });\r\n      // Xử lý sau khi đặt phòng thành công\r\n      setOpen(false);\r\n    } catch (err) {\r\n      console.error(err);\r\n      // Xử lý lỗi ở đây\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"reserve\">\r\n      <h2>Chọn phòng</h2>\r\n      {loading ? (\r\n        \"Loading...\"\r\n      ) : error ? (\r\n        <span>{error.message}</span>\r\n      ) : (\r\n        availableRooms.map((room) => (\r\n          <div key={room._id} className=\"room\">\r\n            <input\r\n              type=\"checkbox\"\r\n              id={room._id}\r\n              onChange={() => handleSelect(room._id)}\r\n            />\r\n            <label htmlFor={room._id}>\r\n              {room.name} - Giá: ${room.price} cho {totalDays} đêm\r\n            </label>\r\n          </div>\r\n        ))\r\n      )}\r\n      <button onClick={handleReserve} disabled={selectedRooms.length === 0}>\r\n        Đặt phòng\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Reserve;\r\n"]},"metadata":{},"sourceType":"module"}