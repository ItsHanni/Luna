{"ast":null,"code":"var _jsxFileName = \"E:\\\\Do_an_bao_ve\\\\client\\\\src\\\\components\\\\reserve\\\\Reserve.jsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState } from \"react\";\nimport { SearchContext } from \"../../context/SearchContext\";\nimport { AuthContext } from \"../../context/AuthContext\"; // Nhập AuthContext\n\nimport useFetch from \"../../hooks/useFetch\";\nimport \"./reserve.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Reserve = _ref => {\n  _s();\n\n  let {\n    setOpen,\n    hotelId\n  } = _ref;\n  const {\n    dates\n  } = useContext(SearchContext);\n  const {\n    user\n  } = useContext(AuthContext); // Lấy user từ AuthContext\n  // Tính toán ngày checkIn và checkOut\n\n  const checkInDate = dates[0].startDate;\n  const checkOutDate = dates[0].endDate; // State để lưu danh sách phòng đã chọn\n\n  const [selectedRooms, setSelectedRooms] = useState([]); // Sử dụng useFetch để lấy dữ liệu phòng trống\n\n  const {\n    data: availableRooms,\n    loading,\n    error\n  } = useFetch(`/rooms/available?hotelId=${hotelId}&checkInDate=${checkInDate}&checkOutDate=${checkOutDate}`);\n\n  const handleSelect = roomId => {\n    setSelectedRooms(prev => prev.includes(roomId) ? prev.filter(id => id !== roomId) // Nếu phòng đã được chọn thì bỏ chọn\n    : [...prev, roomId] // Nếu chưa được chọn thì thêm vào\n    );\n  };\n\n  const handleBooking = async () => {\n    try {\n      const res = await fetch(\"http://localhost:8800/api/bookings\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          roomIds: selectedRooms,\n          // Gửi danh sách phòng đã chọn\n          userId: user._id,\n          // Lấy userId từ context\n          hotelId,\n          checkInDate,\n          checkOutDate\n        })\n      });\n      const result = await res.json();\n\n      if (result.success) {\n        alert(\"Đặt phòng thành công!\");\n        setOpen(false);\n      } else {\n        alert(\"Đặt phòng không thành công. Vui lòng thử lại.\");\n      }\n    } catch (err) {\n      console.error(err);\n      alert(\"Có lỗi xảy ra. Vui lòng thử lại.\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"reserve\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setOpen(false),\n      children: \"\\u0110\\xF3ng\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"C\\xE1c ph\\xF2ng tr\\u1ED1ng\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u0110ang t\\u1EA3i...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u0110\\xE3 x\\u1EA3y ra l\\u1ED7i: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this) : availableRooms.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: availableRooms.map(room => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: room._id,\n          value: room._id,\n          onChange: () => handleSelect(room._id) // Gọi hàm handleSelect khi checkbox thay đổi\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: room._id,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: room.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: room.desc\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Gi\\xE1: $\", room.price]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }, this)]\n      }, room._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Kh\\xF4ng c\\xF3 ph\\xF2ng tr\\u1ED1ng trong kho\\u1EA3ng th\\u1EDDi gian \\u0111\\xE3 ch\\u1ECDn.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleBooking,\n      children: \"\\u0110\\u1EB7t ph\\xF2ng\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Reserve, \"FHFbKDvNXwAlqpUhUu3wDoagkW8=\", false, function () {\n  return [useFetch];\n});\n\n_c = Reserve;\nexport default Reserve;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reserve\");","map":{"version":3,"sources":["E:/Do_an_bao_ve/client/src/components/reserve/Reserve.jsx"],"names":["useContext","useEffect","useState","SearchContext","AuthContext","useFetch","Reserve","setOpen","hotelId","dates","user","checkInDate","startDate","checkOutDate","endDate","selectedRooms","setSelectedRooms","data","availableRooms","loading","error","handleSelect","roomId","prev","includes","filter","id","handleBooking","res","fetch","method","headers","body","JSON","stringify","roomIds","userId","_id","result","json","success","alert","err","console","message","length","map","room","title","desc","price"],"mappings":"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","sourcesContent":["import { useContext, useEffect, useState } from \"react\";\r\nimport { SearchContext } from \"../../context/SearchContext\";\r\nimport { AuthContext } from \"../../context/AuthContext\"; // Nhập AuthContext\r\nimport useFetch from \"../../hooks/useFetch\";\r\nimport \"./reserve.css\";\r\n\r\nconst Reserve = ({ setOpen, hotelId }) => {\r\n  const { dates } = useContext(SearchContext);\r\n  const { user } = useContext(AuthContext); // Lấy user từ AuthContext\r\n  \r\n  // Tính toán ngày checkIn và checkOut\r\n  const checkInDate = dates[0].startDate;\r\n  const checkOutDate = dates[0].endDate;\r\n\r\n  // State để lưu danh sách phòng đã chọn\r\n  const [selectedRooms, setSelectedRooms] = useState([]);\r\n\r\n  // Sử dụng useFetch để lấy dữ liệu phòng trống\r\n  const { data: availableRooms, loading, error } = useFetch(\r\n    `/rooms/available?hotelId=${hotelId}&checkInDate=${checkInDate}&checkOutDate=${checkOutDate}`\r\n  );\r\n\r\n  const handleSelect = (roomId) => {\r\n    setSelectedRooms((prev) =>\r\n      prev.includes(roomId)\r\n        ? prev.filter((id) => id !== roomId) // Nếu phòng đã được chọn thì bỏ chọn\r\n        : [...prev, roomId] // Nếu chưa được chọn thì thêm vào\r\n    );\r\n  };\r\n\r\n  const handleBooking = async () => {\r\n    try {\r\n      const res =await fetch(\"http://localhost:8800/api/bookings\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          roomIds: selectedRooms, // Gửi danh sách phòng đã chọn\r\n          userId: user._id, // Lấy userId từ context\r\n          hotelId,\r\n          checkInDate,\r\n          checkOutDate,\r\n        }),\r\n      });\r\n      const result = await res.json();\r\n      if (result.success) {\r\n        alert(\"Đặt phòng thành công!\");\r\n        setOpen(false);\r\n      } else {\r\n        alert(\"Đặt phòng không thành công. Vui lòng thử lại.\");\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"Có lỗi xảy ra. Vui lòng thử lại.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"reserve\">\r\n      <button onClick={() => setOpen(false)}>Đóng</button>\r\n      <h2>Các phòng trống</h2>\r\n      {loading ? (\r\n        <p>Đang tải...</p>\r\n      ) : error ? (\r\n        <p>Đã xảy ra lỗi: {error.message}</p>\r\n      ) : availableRooms.length > 0 ? (\r\n        <ul>\r\n          {availableRooms.map((room) => (\r\n            <li key={room._id}>\r\n              <input\r\n                type=\"checkbox\"\r\n                id={room._id}\r\n                value={room._id}\r\n                onChange={() => handleSelect(room._id)} // Gọi hàm handleSelect khi checkbox thay đổi\r\n              />\r\n              <label htmlFor={room._id}>\r\n                <h3>{room.title}</h3>\r\n                <p>{room.desc}</p>\r\n                <span>Giá: ${room.price}</span>\r\n              </label>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p>Không có phòng trống trong khoảng thời gian đã chọn.</p>\r\n      )}\r\n      <button onClick={handleBooking}>Đặt phòng</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Reserve;\r\n"]},"metadata":{},"sourceType":"module"}