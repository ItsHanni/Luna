{"ast":null,"code":"var _jsxFileName = \"E:\\\\Do_an_bao_ve\\\\client\\\\src\\\\components\\\\reserve\\\\Reserve.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport axios from 'axios';\nimport { useLocation } from 'react-router-dom';\nimport { SearchContext } from '../../context/SearchContext'; // Import context\n\nimport { AuthContext } from '../../context/AuthContext'; // Import AuthContext\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Reserve = _ref => {\n  _s();\n\n  let {\n    setOpen,\n    hotelId\n  } = _ref;\n  const {\n    dates\n  } = useContext(SearchContext); // Lấy ngày từ context\n\n  const {\n    user\n  } = useContext(AuthContext); // Lấy thông tin người dùng từ context\n\n  const [rooms, setRooms] = useState([]);\n  const [selectedRooms, setSelectedRooms] = useState([]);\n  useEffect(() => {\n    const getAvailableRooms = async () => {\n      try {\n        const res = await axios.get(`/api/rooms/available/${hotelId}`, {\n          params: {\n            dates\n          }\n        });\n        setRooms(res.data);\n      } catch (err) {\n        console.error(\"Lỗi khi lấy danh sách phòng trống:\", err);\n      }\n    };\n\n    getAvailableRooms();\n  }, [hotelId, dates]);\n\n  const handleSelect = roomId => {\n    setSelectedRooms(prev => {\n      if (prev.includes(roomId)) {\n        return prev.filter(id => id !== roomId); // Bỏ chọn nếu đã chọn\n      }\n\n      return [...prev, roomId]; // Chọn phòng\n    });\n  };\n\n  const handleBook = async () => {\n    if (selectedRooms.length > 0) {\n      try {\n        const res = await axios.post('/api/bookings', {\n          hotelId,\n          roomIds: selectedRooms,\n          userId: user.id,\n          // Lấy userId từ context\n          checkInDate: dates[0].startDate,\n          checkOutDate: dates[0].endDate\n        });\n        alert('Đặt phòng thành công!');\n        setOpen(false);\n      } catch (err) {\n        console.error(\"Lỗi khi đặt phòng:\", err);\n      }\n    } else {\n      alert('Vui lòng chọn ít nhất một phòng để đặt.');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Ch\\u1ECDn ph\\xF2ng\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), rooms.map(room => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: room.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: room.desc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Gi\\xE1: \", room.price, \" VN\\u0110\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        onChange: () => handleSelect(room._id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, room._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleBook,\n      children: \"\\u0110\\u1EB7t ph\\xF2ng\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Reserve, \"ZBHhrj8TH23JbJ9+SE7DNI+G3v4=\");\n\n_c = Reserve;\nexport default Reserve;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reserve\");","map":{"version":3,"sources":["E:/Do_an_bao_ve/client/src/components/reserve/Reserve.jsx"],"names":["React","useEffect","useState","useContext","axios","useLocation","SearchContext","AuthContext","Reserve","setOpen","hotelId","dates","user","rooms","setRooms","selectedRooms","setSelectedRooms","getAvailableRooms","res","get","params","data","err","console","error","handleSelect","roomId","prev","includes","filter","id","handleBook","length","post","roomIds","userId","checkInDate","startDate","checkOutDate","endDate","alert","map","room","title","desc","price","_id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,aAAT,QAA8B,6BAA9B,C,CAA6D;;AAC7D,SAASC,WAAT,QAA4B,2BAA5B,C,CAAyD;;;;AAEzD,MAAMC,OAAO,GAAG,QAA0B;AAAA;;AAAA,MAAzB;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAyB;AACxC,QAAM;AAAEC,IAAAA;AAAF,MAAYR,UAAU,CAACG,aAAD,CAA5B,CADwC,CACK;;AAC7C,QAAM;AAAEM,IAAAA;AAAF,MAAWT,UAAU,CAACI,WAAD,CAA3B,CAFwC,CAEE;;AAC1C,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACa,aAAD,EAAgBC,gBAAhB,IAAoCd,QAAQ,CAAC,EAAD,CAAlD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,iBAAiB,GAAG,YAAY;AACpC,UAAI;AACF,cAAMC,GAAG,GAAG,MAAMd,KAAK,CAACe,GAAN,CAAW,wBAAuBT,OAAQ,EAA1C,EAA6C;AAC7DU,UAAAA,MAAM,EAAE;AACNT,YAAAA;AADM;AADqD,SAA7C,CAAlB;AAKAG,QAAAA,QAAQ,CAACI,GAAG,CAACG,IAAL,CAAR;AACD,OAPD,CAOE,OAAOC,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAc,oCAAd,EAAoDF,GAApD;AACD;AACF,KAXD;;AAaAL,IAAAA,iBAAiB;AAClB,GAfQ,EAeN,CAACP,OAAD,EAAUC,KAAV,CAfM,CAAT;;AAiBA,QAAMc,YAAY,GAAIC,MAAD,IAAY;AAC/BV,IAAAA,gBAAgB,CAAEW,IAAD,IAAU;AACzB,UAAIA,IAAI,CAACC,QAAL,CAAcF,MAAd,CAAJ,EAA2B;AACzB,eAAOC,IAAI,CAACE,MAAL,CAAaC,EAAD,IAAQA,EAAE,KAAKJ,MAA3B,CAAP,CADyB,CACkB;AAC5C;;AACD,aAAO,CAAC,GAAGC,IAAJ,EAAUD,MAAV,CAAP,CAJyB,CAIC;AAC3B,KALe,CAAhB;AAMD,GAPD;;AASA,QAAMK,UAAU,GAAG,YAAY;AAC7B,QAAIhB,aAAa,CAACiB,MAAd,GAAuB,CAA3B,EAA8B;AAC5B,UAAI;AACF,cAAMd,GAAG,GAAG,MAAMd,KAAK,CAAC6B,IAAN,CAAW,eAAX,EAA4B;AAC5CvB,UAAAA,OAD4C;AAE5CwB,UAAAA,OAAO,EAAEnB,aAFmC;AAG5CoB,UAAAA,MAAM,EAAEvB,IAAI,CAACkB,EAH+B;AAG3B;AACjBM,UAAAA,WAAW,EAAEzB,KAAK,CAAC,CAAD,CAAL,CAAS0B,SAJsB;AAK5CC,UAAAA,YAAY,EAAE3B,KAAK,CAAC,CAAD,CAAL,CAAS4B;AALqB,SAA5B,CAAlB;AAOAC,QAAAA,KAAK,CAAC,uBAAD,CAAL;AACA/B,QAAAA,OAAO,CAAC,KAAD,CAAP;AACD,OAVD,CAUE,OAAOa,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAc,oBAAd,EAAoCF,GAApC;AACD;AACF,KAdD,MAcO;AACLkB,MAAAA,KAAK,CAAC,yCAAD,CAAL;AACD;AACF,GAlBD;;AAoBA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEG3B,KAAK,CAAC4B,GAAN,CAAWC,IAAD,iBACT;AAAA,8BACE;AAAA,kBAAKA,IAAI,CAACC;AAAV;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAID,IAAI,CAACE;AAAT;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA,+BAASF,IAAI,CAACG,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,QAAQ,EAAE,MAAMpB,YAAY,CAACiB,IAAI,CAACI,GAAN;AAF9B;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA,OAAUJ,IAAI,CAACI,GAAf;AAAA;AAAA;AAAA;AAAA,YADD,CAFH,eAaE;AAAQ,MAAA,OAAO,EAAEf,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAbF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CArED;;GAAMvB,O;;KAAAA,O;AAuEN,eAAeA,OAAf","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { SearchContext } from '../../context/SearchContext'; // Import context\r\nimport { AuthContext } from '../../context/AuthContext'; // Import AuthContext\r\n\r\nconst Reserve = ({ setOpen, hotelId }) => {\r\n  const { dates } = useContext(SearchContext); // Lấy ngày từ context\r\n  const { user } = useContext(AuthContext); // Lấy thông tin người dùng từ context\r\n  const [rooms, setRooms] = useState([]);\r\n  const [selectedRooms, setSelectedRooms] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getAvailableRooms = async () => {\r\n      try {\r\n        const res = await axios.get(`/api/rooms/available/${hotelId}`, {\r\n          params: {\r\n            dates,\r\n          },\r\n        });\r\n        setRooms(res.data);\r\n      } catch (err) {\r\n        console.error(\"Lỗi khi lấy danh sách phòng trống:\", err);\r\n      }\r\n    };\r\n\r\n    getAvailableRooms();\r\n  }, [hotelId, dates]);\r\n\r\n  const handleSelect = (roomId) => {\r\n    setSelectedRooms((prev) => {\r\n      if (prev.includes(roomId)) {\r\n        return prev.filter((id) => id !== roomId); // Bỏ chọn nếu đã chọn\r\n      }\r\n      return [...prev, roomId]; // Chọn phòng\r\n    });\r\n  };\r\n\r\n  const handleBook = async () => {\r\n    if (selectedRooms.length > 0) {\r\n      try {\r\n        const res = await axios.post('/api/bookings', {\r\n          hotelId,\r\n          roomIds: selectedRooms,\r\n          userId: user.id, // Lấy userId từ context\r\n          checkInDate: dates[0].startDate,\r\n          checkOutDate: dates[0].endDate,\r\n        });\r\n        alert('Đặt phòng thành công!');\r\n        setOpen(false);\r\n      } catch (err) {\r\n        console.error(\"Lỗi khi đặt phòng:\", err);\r\n      }\r\n    } else {\r\n      alert('Vui lòng chọn ít nhất một phòng để đặt.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Chọn phòng</h2>\r\n      {rooms.map((room) => (\r\n        <div key={room._id}>\r\n          <h4>{room.title}</h4>\r\n          <p>{room.desc}</p>\r\n          <p>Giá: {room.price} VNĐ</p>\r\n          <input\r\n            type=\"checkbox\"\r\n            onChange={() => handleSelect(room._id)}\r\n          />\r\n        </div>\r\n      ))}\r\n      <button onClick={handleBook}>Đặt phòng</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Reserve;\r\n"]},"metadata":{},"sourceType":"module"}